import numpy as np
from skimage.io import imread
from skimage.restoration import denoise_bilateral, denoise_nl_means,␣
,→estimate_sigma
#from skimage.measure import compare_psnr
from skimage.util import random_noise
from skimage.color import rgb2gray
from PIL import Image, ImageEnhance, ImageFilter
from scipy import ndimage, misc
import matplotlib.pylab as pylab

def plot_image(image, title=''):

pylab.title(title, size=20), pylab.imshow(image)
pylab.axis('off') # comment this line if you want axis ticks
def plot_hist(r, g, b, title=''):
r, g, b = img_as_ubyte(r), img_as_ubyte(g), img_as_ubyte(b)
pylab.hist(np.array(r).ravel(), bins=256, range=(0, 256), color='r',␣
,→alpha=0.5)
pylab.hist(np.array(g).ravel(), bins=256, range=(0, 256), color='g',␣
,→alpha=0.5)
pylab.hist(np.array(b).ravel(), bins=256, range=(0, 256), color='b',␣
,→alpha=0.5)
pylab.xlabel('pixel value', size=20), pylab.ylabel('frequency', size=20)
pylab.title(title, size=20)
[39]: # Smoothing with ImageFilter.BLUR
i = 1
pylab.figure(figsize=(10,25))
for prop_noise in np.linspace(0.05,0.3,3): # creating numeric sequences␣
,→-evenly spaced numbers structured as a NumPy array
im = Image.open('images/rkm.jpg')
# choose 5000 random locations inside image
n = int(im.width * im.height * prop_noise)
x, y = np.random.randint(0, im.width, n), np.random.randint(0, im.height, n)
for (x,y) in zip(x,y):
im.putpixel((x, y), ((0,0,0) if np.random.rand() < 0.5 else␣
,→(255,255,255))) # generate salt-and-pepper noise
im.save('output/rkm_' + str(prop_noise) + '.jpg')
pylab.subplot(6,2,i), plot_image(im, 'Original Image with ' +
str(int(100*prop_noise)) + '% added noise')
i += 1
im1 = im.filter(ImageFilter.BLUR)
pylab.subplot(6,2,i), plot_image(im1, 'Blurred Image')
i += 1
pylab.show()
 
 
# Smoothing by averaging with the box blur kernel
im = Image.open('images/rkm.jpg')
pylab.figure(figsize=(20,7))
pylab.subplot(1,3,1), pylab.imshow(im), pylab.title('Original Image', size=30),␣
,→pylab.axis('off')
for n in [3,5]:
box_blur_kernel = np.reshape(np.ones(n*n),(n,n)) / (n*n)
im1 = im.filter(ImageFilter.Kernel((n,n), box_blur_kernel.flatten()))

pylab.subplot(1,3,(2 if n==3 else 3))
plot_image(im1, 'Blurred with kernel size = ' + str(n) + 'x' + str(n))
pylab.suptitle('PIL Mean Filter (Box Blur) with different Kernel size',size=30)
pylab.show()
 
# Smoothing with the Gaussian blur filter
im = Image.open('images/rkm.jpg')
pylab.figure(figsize=(20,6))
i = 1
for radius in range(1, 4):
im1 = im.filter(ImageFilter.GaussianBlur(radius))
pylab.subplot(1,3,i), plot_image(im1, 'radius = ' +
str(round(radius,2)))
i += 1
pylab.suptitle('PIL Gaussian Blur with different Radius', size=20)
pylab.show()
 
#Comparing smoothing with box and Gaussian kernels using SciPy ndimage
from scipy import misc, ndimage
import matplotlib.pylab as pylab
im = imread('images/rkm.jpg')
k = 7 # 7x7 kernel
im_box = ndimage.uniform_filter(im, size=(k,k,1))
s = 2 # sigma value
t = (((k - 1)/2)-0.5)/s # truncate parameter value for a kxk gaussian kernel␣
,→with sigma s
im_gaussian = ndimage.gaussian_filter(im, sigma=(s,s,0), truncate=t)
fig = pylab.figure(figsize=(30,10))
pylab.subplot(131), plot_image(im, 'original image')
pylab.subplot(132), plot_image(im_box, 'with the box filter')
pylab.subplot(133), plot_image(im_gaussian, 'with the gaussian filter')
pylab.show()
 
# Using the median filter
i = 1
pylab.figure(figsize=(25,35))
for prop_noise in np.linspace(0.05,0.3,3):
im = Image.open('images/rkm.jpg')
# choose 5000 random locations inside image
n = int(im.width * im.height * prop_noise)
x, y = np.random.randint(0, im.width, n), np.random.randint(0, im.height, n)
for (x,y) in zip(x,y):
im.putpixel((x, y), ((0,0,0) if np.random.rand() < 0.5 else␣
,→(255,255,255))) # geenrate salt-and-pepper noise
im.save('output/rkm_' + str(prop_noise) + '.jpg')
pylab.subplot(6,4,i)
plot_image(im, 'Original Image with ' + str(int(100*prop_noise)) + '%added␣
,→noise')
i += 1
for sz in [3,7,11]:

5

im1 = im.filter(ImageFilter.MedianFilter(size=sz))
pylab.subplot(6,4,i), plot_image(im1, 'Output (Median Filter size=' + ␣
,→str(sz) + ')')
i += 1
pylab.show()
 

# Using max and min filter
im = Image.open('output/rkm_0.3.jpg')
pylab.figure(figsize=(30,10))
sz = 3
pylab.subplot(1,3,1)
plot_image(im, 'Original Image with 10% added noise')
im1 = im.filter(ImageFilter.MaxFilter(size=sz))
pylab.subplot(1,3,2), plot_image(im1, 'Output (Max Filter size=' + str(sz)+ ')')
im1 = im1.filter(ImageFilter.MinFilter(size=sz))
pylab.subplot(1,3,3), plot_image(im1, 'Output (Min Filter size=' + str(sz)+ ')')
pylab.show()
 