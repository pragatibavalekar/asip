#pract3 Intensity Transformations (pixel transformations)

import numpy as np
from skimage import data, img_as_float, img_as_ubyte, exposure, io, color
from skimage.io import imread
from skimage.exposure import cumulative_distribution
from skimage.restoration import denoise_bilateral, denoise_nl_means, estimate_sigma
#from skimage.measure import compare_psnr
from skimage.util import random_noise
from skimage.color import rgb 2 gray
from PIL import Image, Image Enhance,Image Filter
from scipy import nd image, misc
import matplotlib.pylab as pylab


#load image and plot histogram
#functiont o display image
def plot_image(image,title=""):
    pylab.title(title,size=20),pylab.imshow(image)
    pylab.axis('off')

#functiont o display histogram

def plot_hist(r,g,b,title=''):
    r,g,b = img_as_ubyte(r),img_as_ubyte(g),img_as_ubyte(b)
    pylab.hist(np.array(r).ravel(),bins=256,range=(0,256),color='r',alpha=0.5)
    pylab.hist(np.array(g).ravel(),bins=256,range=(0,256),color='g',alpha=0.5)
    pylab.hist(np.array(b).ravel(),bins=256,range=(0,256),color='b',alpha=0.5)
    pylab.xlabel('PixelValues',size=20),pylab.ylabel('Frequency',size=20)
    pylab.title(title,size=20)

im = Image.open('images/elephant2.jpeg')
im_r,im_g,im_b = im.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_image(im,'Original Image')
pylab.subplot(122),plot_hist(im_r,im_g,im_b,'Histpgram of RGB Image')
pylab.show()




#log transformation
im = im.point(lambda i:255*np.log(1+i/255))
im_r,im_g,im_b = im.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_image(im, 'Image after Log Transformation')
pylab.subplot(122),plot_hist(im_r,im_g,im_b,'Histogram of Log transform for RGB channel')
pylab.show()



#power law transform
im = img_as_float(imread('images/bird.jpg'))

#im_r,im_g,im_b=im.split()

gamma=2.5
im1 = im**gamma

pylab.style use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_hist(im[...,0],im[...,1],im[...,2],'Histogram for RGB channel (Input)')
pylab.subplot(122),plot_hist(im1[...,0],im1[...,1],im1[...,2],'Histogram for RGB Output')
pylab.show()
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_image(im, 'Image original')
pylab.subplot(122),plot_image(im1, 'Output')
pylab.show()

#constrast streching
im = Image.open('images/bird.jpg')
im_r,im_g,im_b = im.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121)


plot_image(im)
pylab.subplot(122)
plot_hist(im_r,im_g,im_b)
pylab.show()

#contrast

def contrast(c):
return 0 ifc<50else(255 ifc>150 else(255*c-22950)/48)

im1 = im.point(contrast)
im_r,im_g,im_b = im1.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121)
plot_image(im1)
pylab.subplot(122)
plot_hist(im_r,im_g,im_b)
pylab.yscale('log',basey=10)
pylab.show()

pylab.yscale('log',basey=10)




#thresholding operations

im=Image.open('images/elephant.jpg').convert('L')
pylab.hist(np.array(im).ravel(),bins=256,range=(0,256),color='g')
pylab.xlabel('Pixel values'),pylab.ylabel('Frequency')
pylab.title('Histogram of Pixel values')
pylab.show()

pylab.figure(figsize=(12,18))
pylab.gray()
pylab.subplot(221),plot_image(im,'Original Image')
pylab.axis('off')
th=[0,50,100,150,200]

for i in range(2,5):
    im1 = im.point(lambda x:x > th[i]) 
    pylab.subplot(2,2,i),plot_image(im1, 'binary Image with threshold=' +str(th[i]))
pylab.show()



